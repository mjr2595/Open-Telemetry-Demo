import { kLayerPatched } from './express';
import { Request } from 'express';
import { Attributes, Span } from '@opentelemetry/api';
import { PluginConfig } from '@opentelemetry/core';
/**
 * This const define where on the `request` object the plugin will mount the
 * current stack of express layer.
 *
 * It is necessary because express doesnt store the different layers
 * (ie: middleware, router etc) that it called to get to the current layer.
 * Given that, the only way to know the route of a given layer is to
 * store the path of where each previous layer has been mounted.
 *
 * ex: bodyParser > auth middleware > /users router > get /:id
 *  in this case the stack would be: ["/users", "/:id"]
 *
 * ex2: bodyParser > /api router > /v1 router > /users router > get /:id
 *  stack: ["/api", "/v1", "/users", ":id"]
 *
 */
export declare const _LAYERS_STORE_PROPERTY = "__ot_middlewares";
export declare type Parameters<T> = T extends (...args: infer T) => any ? T : unknown[];
export declare type PatchedRequest = {
    [_LAYERS_STORE_PROPERTY]?: string[];
} & Request;
export declare type PathParams = string | RegExp | Array<string | RegExp>;
export declare type ExpressRouter = {
    params: {
        [key: string]: string;
    };
    _params: string[];
    caseSensitive: boolean;
    mergeParams: boolean;
    strict: boolean;
    stack: ExpressLayer[];
};
export declare type ExpressLayer = {
    handle: Function;
    [kLayerPatched]?: boolean;
    name: string;
    params: {
        [key: string]: string;
    };
    path: string;
    regexp: RegExp;
};
export declare type LayerMetadata = {
    attributes: Attributes;
    name: string;
};
export declare enum AttributeNames {
    COMPONENT = "component",
    HTTP_ROUTE = "http.route",
    EXPRESS_TYPE = "express.type",
    EXPRESS_NAME = "express.name"
}
export declare enum ExpressLayerType {
    ROUTER = "router",
    MIDDLEWARE = "middleware",
    REQUEST_HANDLER = "request_handler"
}
export declare type IgnoreMatcher = string | RegExp | ((name: string) => boolean);
/**
 * Options available for the Express Plugin (see [documentation](https://github.com/open-telemetry/opentelemetry-js/tree/main/packages/opentelemetry-plugin-express#express-plugin-options))
 */
export interface ExpressPluginConfig extends PluginConfig {
    /** Ignore specific based on their name */
    ignoreLayers?: IgnoreMatcher[];
    /** Ignore specific layers based on their type */
    ignoreLayersType?: ExpressLayerType[];
}
/**
 * extends opentelemetry/api Span object to instrument the root span name of http plugin
 */
export interface ExpressPluginSpan extends Span {
    name?: string;
}
//# sourceMappingURL=types.d.ts.map